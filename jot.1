.TH JOT 1 "October 2024" "Version 0.2" "User Commands"
.SH NAME
jot \- multiline text editor using GNU Readline
.SH SYNOPSIS
.B jot
.RI [ options ] [ file ]
.SH DESCRIPTION
.B jot
is a simple multiline text editor using the GNU Readline library. It operates inline with the shell prompt, allowing you to enter and edit multiline text directly in the terminal without opening a full-screen editor. Essentially, \fBjot\fP functions like \fBcat\fP but with Readline support for interactive multiline editing.

By default, \fBjot\fP reads input from the terminal and writes it to standard output. If a filename is provided (e.g., \fBjot file.txt\fP), it reads the file's contents into the editor, allowing you to edit and save changes back to the file.

Even when output is redirected or piped, \fBjot\fP interacts with the user via \fI/dev/tty\fP, maintaining the interactive experience.

As an escape hatch to inline editing, \fBjot\fP allows you to invoke a full-screen editor. This can be useful when you need more advanced editing capabilities.

.SH OPTIONS
.TP
.B \-e, \-\-empty
Start with an empty buffer when editing a file. Existing file contents are ignored and overwritten upon saving.

.TP
.B \-b \fIbanner\fP, \-\-banner \fIbanner\fP
Display the specified \fIbanner\fP message before starting. Useful for providing instructions or context.

.TP
.B \-p, \-\-pipe
Read input from standard input instead of from a file. This allows \fBjot\fP to operate within shell pipelines by reading input directly from standard input.

.SH EXAMPLES
Start \fBjot\fP and save the input to \fItest.txt\fP:

.EX
jot > test.txt
.EE

Open \fBjot\fP to edit \fIfile.txt\fP:

.EX
jot file.txt
.EE

Start \fBjot\fP with an empty buffer and save to \fIfile.txt\fP upon exit:

.EX
jot -e file.txt
.EE

Use \fBjot\fP in a pipeline to edit the output of \fIsome_command\fP and save to \fIoutput.txt\fP:

.EX
some_command | jot -p > output.txt
.EE

.SH KEY BINDINGS
\fBjot\fP defines and binds custom Readline functions to enhance multiline editing. The following functions are available, with their default key bindings shown in parentheses:

Most default Readline bindings are available unless specified in the "Unbound Default Functions" section.

.SS Exiting the Editor
.TP
.B jot-custom-ctrl-d (C\-d)
At the end of the buffer, invokes \fBaccept-line\fP to complete editing and accept the input. Otherwise, deletes the character under the cursor by calling \fBdelete-char\fP.

.TP
.B accept-line (C\-n)
Completes editing and accepts the input.

.SS Invoking External Editor
.TP
.B invoke-fullscreen-editor (C\-x C\-e)
Invokes a full-screen editor to edit the current text. The editor used is determined by the \fBJOT_EDITOR\fP environment variable; if not set, it defaults to \fBvi\fP.

.SS Cursor Movement
.TP
.B jot-insert-newline (Enter)
Inserts a newline character at the cursor position.

.TP
.B jot-beginning-of-line (C\-a, Home)
Moves the cursor to the beginning of the current line.

.TP
.B jot-end-of-line (C\-e, End)
Moves the cursor to the end of the current line.

.TP
.B jot-move-cursor-up (Up Arrow)
Moves the cursor up one line.

.TP
.B jot-move-cursor-down (Down Arrow)
Moves the cursor down one line.

.TP
.B beginning-of-buffer (M\-<)
Moves the cursor to the beginning of the text.

.TP
.B end-of-buffer (M\->)
Moves the cursor to the end of the text.

.SS Editing Text
.TP
.B jot-kill-line (C\-k)
Kills (cuts) text from the cursor to the end of the line.

.TP
.B jot-kill-backward-line (C\-u)
Kills (cuts) text from the beginning of the line to the cursor.

.TP
.B jot-kill-whole-line
Kills (cuts) the entire current line.

.SS Unbound Default Functions
To prevent interference with multiline editing, several default Readline functions are unbound in \fBjot\fP:

.TP
.B Completion functions
Auto-completion and related functions are disabled.

.TP
.B History search functions
Reverse and forward history searches are disabled.

.TP
.B Search functions
Incremental search functions are disabled.

.PP
Unless specified above, other default Readline key bindings and functions are available for use.

.SH VI MODE
In Vi mode, \fBjot\fP defines and binds custom functions to replicate common Vi commands for multiline editing. The following functions are available, with their default key bindings shown in parentheses:

.TP
.B jot-move-cursor-down (j)
Moves the cursor down one line.

.TP
.B jot-move-cursor-up (k)
Moves the cursor up one line.

.TP
.B jot-vi-join-lines (J)
Joins the current line with the next line.

.TP
.B jot-vi-insert-line-below (o)
Inserts a new line below the current line and enters insert mode.

.TP
.B jot-vi-insert-line-above (O)
Inserts a new line above the current line and enters insert mode.

.TP
.B jot-beginning-of-line (^)
Moves to the beginning of the current line.

.TP
.B jot-end-of-line ($)
Moves to the end of the current line.

.TP
.B jot-vi-goto-line (G)
Goes to the specified line number or the end of the text.

.TP
.B jot-vi-goto-first-line (gg)
Goes to the beginning of the text.

.TP
.B jot-vi-delete-current-line (dd)
Deletes the current line.

.TP
.B jot-vi-delete-to-end-of-line (D)
Deletes from the cursor to the end of the line.

To enable Vi mode, add the following to your \fI~/.inputrc\fP:

.EX
$if jot
    set editing-mode vi
$endif
.EE

.SH CONFIGURATION
Customize \fBjot\fP's key bindings and behavior using the Readline initialization file (\fIthe inputrc file\fP), applying settings specifically for \fBjot\fP with conditional blocks.

For example, to rebind the accept line key to \fBC\-x\fP, add:

.EX
$if jot
    "\\C-x": accept-line
$endif
.EE

To change the key binding for moving to the beginning of the line:

.EX
$if jot
    "\\C-b": beginning-of-line-multiline
$endif
.EE

By default, the full-screen editor invoked by \fBjot\fP when pressing \fBC\-x C\-e\fP is \fBvi\fP. You can change this by setting the \fBJOT_EDITOR\fP environment variable to the editor of your choice.

.SH USING WITH GIT
To use \fBjot\fP as your default Git editor:

.EX
git config --global core.editor jot
.EE

Or set the \fBGIT_EDITOR\fP environment variable.

Note: Git might display the message:

.RS
hint: Waiting for your editor to close the file...
.RE

Since \fBjot\fP operates inline in the terminal and doesn't open a separate window, this message causes display issues during editing. To suppress it:

.EX
git config --global advice.waitingForEditor false
.EE

This provides a cleaner experience when using \fBjot\fP as your Git editor.

.SH BUGS
.TP
.B Vi Mode
Vi mode is very limited and doesn't fully implement all Vi commands.

.TP
.B Multibyte Unicode Support
While some key functions support multibyte Unicode characters, not all of \fBjot\fP's functions fully support them yet. However, all default Readline functions do have Unicode support.

.TP
.B Crash Recovery
Unsaved changes may be lost in case of a crash; no effort is made to preserve contents.

.TP
.B Scrolling Large Text
If input exceeds the terminal's visible area, display artifacts may occur. Press \fBC\-l\fP to refresh the display.

.TP
.B Count Arguments
Not all of \fBjot\fP's functions support a count argument.

.SH SEE ALSO
.BR readline (3),
.BR cat (1)

.SH AUTHORS
The idea for \fBjot\fP comes from an early implementation of multiline editing with Readline by Colm MacCárthaigh in the \fBc-hey\fP tool.

This version of \fBjot\fP was written using GPT-4 by Periklis Akritidis.

.SH REPORTING BUGS
Report bugs to \fBjot-bugs@akritidis.org\fP.

.SH COPYRIGHT
Copyright © 2024 Periklis Akritidis

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
